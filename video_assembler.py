"""
Module d'ASSEMBLAGE de vid√©o avec concat√©nation ultra-robuste
==============================================================
Ce module g√®re l'assemblage final des clips extraits en une vid√©o compl√®te.
Utilise une m√©thode de mat√©rialisation syst√©matique pour √©viter les erreurs MoviePy.

Fonctions principales :
- create_final_video_ultra_safe : Cr√©e la vid√©o finale avec tous les √©l√©ments
- safe_concatenate_with_materialization : Concat√©nation s√©curis√©e des clips
- materialize_clip : Mat√©rialise un clip sur disque pour √©viter les r√©f√©rences cass√©es
- smart_shuffle_clips : M√©lange intelligent en alternant les sources
"""
import cv2
import numpy as np
import streamlit as st
import random
import time
import os
import tempfile
from moviepy.editor import (
    VideoFileClip, concatenate_videoclips, CompositeVideoClip, 
    ImageClip, AudioFileClip, afx
)
from PIL import Image
from typing import List, Dict, Optional, Tuple
from constants import VIDEO_FORMAT, DEFAULT_SETTINGS, UI_MESSAGES, IS_RAILWAY
from video_analyzer import analyze_video_segments_with_face
from video_normalizer import prepare_clips_for_concatenation, verify_clips_compatibility
from face_detector import get_face_regions_for_crop
from text_detector import detect_text_regions, remove_text_with_crop, remove_text_with_inpainting


def smart_shuffle_clips(clips_by_video: Dict[int, List[VideoFileClip]]) -> List[VideoFileClip]:
    """
    M√©lange intelligent en alternant entre les vid√©os
    
    Args:
        clips_by_video: Clips group√©s par vid√©o
    
    Returns:
        List[VideoFileClip]: Clips m√©lang√©s
    """
    shuffled_clips = []
    
    # Cr√©er des listes de clips par vid√©o
    video_clip_lists = list(clips_by_video.values())
    
    # M√©langer chaque liste individuellement
    for clip_list in video_clip_lists:
        random.shuffle(clip_list)
    
    # Alterner entre les vid√©os
    max_clips = max(len(clips) for clips in video_clip_lists)
    
    for i in range(max_clips):
        for video_clips in video_clip_lists:
            if i < len(video_clips):
                shuffled_clips.append(video_clips[i])
    
    return shuffled_clips


def materialize_clip(clip: VideoFileClip, name: str = "clip") -> Optional[VideoFileClip]:
    """
    Mat√©rialise un clip en l'√©crivant sur disque puis en le rechargeant.
    Cela r√©sout les probl√®mes de r√©f√©rences cass√©es dans MoviePy.
    
    Args:
        clip: Le clip √† mat√©rialiser
        name: Nom pour identifier le clip dans les logs
    
    Returns:
        VideoFileClip mat√©rialis√© ou None si √©chec
    """
    if clip is None:
        st.error(f"‚ùå {name}: clip est None")
        return None
    
    try:
        # Cr√©er un fichier temporaire unique
        temp_path = os.path.join(tempfile.gettempdir(), f"materialized_{name}_{int(time.time()*1000)}.mp4")
        
        st.info(f"üíæ Mat√©rialisation de {name} sur disque...")
        
        # Test pr√©alable d'acc√®s aux frames
        try:
            test_frame = clip.get_frame(0)
            if test_frame is None:
                st.warning(f"‚ö†Ô∏è {name}: get_frame retourne None, tentative de r√©cup√©ration...")
                # Essayer de recr√©er le clip
                if hasattr(clip, 'filename'):
                    st.info(f"üîÑ Rechargement depuis {clip.filename}")
                    clip = VideoFileClip(clip.filename)
                else:
                    st.error(f"‚ùå {name}: Impossible de r√©cup√©rer le clip")
                    return None
        except Exception as e:
            st.error(f"‚ùå {name}: Erreur test frame: {str(e)}")
            return None
        
        # √âcrire le clip sur disque avec des param√®tres ultra-l√©gers
        clip.write_videofile(
            temp_path,
            codec='libx264',
            preset='ultrafast',
            fps=VIDEO_FORMAT['fps'],
            audio=False,
            logger=None,
            verbose=False,
            threads=2,
            ffmpeg_params=['-crf', '23']  # Qualit√© l√©g√®rement r√©duite pour la vitesse
        )
        
        # Fermer le clip original
        clip.close()
        
        # V√©rifier que le fichier existe et a une taille raisonnable
        if not os.path.exists(temp_path):
            st.error(f"‚ùå {name}: Fichier non cr√©√©")
            return None
        
        file_size_mb = os.path.getsize(temp_path) / 1024 / 1024
        if file_size_mb < 0.01:
            st.error(f"‚ùå {name}: Fichier trop petit ({file_size_mb:.2f} MB)")
            return None
        
        st.success(f"‚úÖ {name} mat√©rialis√©: {file_size_mb:.1f} MB")
        
        # Recharger le clip depuis le disque
        materialized = VideoFileClip(temp_path)
        
        # Valider le clip recharg√©
        if materialized.duration <= 0:
            st.error(f"‚ùå {name}: Dur√©e invalide apr√®s mat√©rialisation")
            materialized.close()
            os.remove(temp_path)
            return None
        
        # Test final d'acc√®s aux frames
        try:
            test_frame = materialized.get_frame(0)
            if test_frame is None:
                st.error(f"‚ùå {name}: Frames inaccessibles apr√®s mat√©rialisation")
                materialized.close()
                os.remove(temp_path)
                return None
        except Exception as e:
            st.error(f"‚ùå {name}: Test frame √©chou√© apr√®s mat√©rialisation: {str(e)}")
            materialized.close()
            os.remove(temp_path)
            return None
        
        st.success(f"‚úÖ {name} recharg√© et valid√© (dur√©e: {materialized.duration:.1f}s)")
        return materialized
        
    except Exception as e:
        st.error(f"‚ùå Erreur mat√©rialisation {name}: {str(e)}")
        if 'temp_path' in locals() and os.path.exists(temp_path):
            try:
                os.remove(temp_path)
            except:
                pass
        return None


def safe_concatenate_with_materialization(
    clips: List[VideoFileClip], 
    method: str = "compose"
) -> Optional[VideoFileClip]:
    """
    Concat√©nation ultra-s√©curis√©e avec mat√©rialisation syst√©matique
    
    Args:
        clips: Liste des clips √† concat√©ner
        method: M√©thode de concat√©nation
    
    Returns:
        VideoFileClip concat√©n√© et mat√©rialis√© ou None si √©chec
    """
    if not clips:
        st.error("‚ùå Aucun clip √† concat√©ner")
        return None
    
    if len(clips) == 1:
        st.info("üìπ Un seul clip, mat√©rialisation directe")
        return materialize_clip(clips[0], "single_clip")
    
    st.header("üîó Concat√©nation s√©curis√©e avec mat√©rialisation")
    
    # √âTAPE 1: Mat√©rialiser TOUS les clips individuellement d'abord
    st.info(f"üíæ Mat√©rialisation pr√©alable de {len(clips)} clips...")
    materialized_clips = []
    
    for i, clip in enumerate(clips):
        materialized = materialize_clip(clip, f"clip_{i+1}")
        if materialized:
            materialized_clips.append(materialized)
        else:
            st.warning(f"‚ö†Ô∏è Clip {i+1} ignor√© (√©chec mat√©rialisation)")
    
    if not materialized_clips:
        st.error("‚ùå Aucun clip n'a pu √™tre mat√©rialis√©")
        return None
    
    st.success(f"‚úÖ {len(materialized_clips)}/{len(clips)} clips mat√©rialis√©s")
    
    # √âTAPE 2: Concat√©ner les clips mat√©rialis√©s
    st.info(f"üîó Concat√©nation de {len(materialized_clips)} clips mat√©rialis√©s...")
    
    try:
        # Essayer la concat√©nation
        concatenated = concatenate_videoclips(materialized_clips, method=method)
        
        if concatenated is None:
            st.error("‚ùå concatenate_videoclips a retourn√© None")
            # Nettoyer
            for clip in materialized_clips:
                clip.close()
            return None
        
        st.success(f"‚úÖ Clips concat√©n√©s (dur√©e: {concatenated.duration:.1f}s)")
        
        # √âTAPE 3: Mat√©rialiser imm√©diatement le r√©sultat
        st.info("üíæ Mat√©rialisation du r√©sultat final...")
        final_materialized = materialize_clip(concatenated, "final_concatenated")
        
        # Nettoyer les clips interm√©diaires
        for clip in materialized_clips:
            try:
                clip.close()
                # Supprimer le fichier temporaire si possible
                if hasattr(clip, 'filename') and os.path.exists(clip.filename):
                    if 'materialized_' in clip.filename:
                        os.remove(clip.filename)
            except:
                pass
        
        if concatenated != final_materialized:
            concatenated.close()
        
        return final_materialized
        
    except Exception as e:
        st.error(f"‚ùå Erreur concat√©nation: {str(e)}")
        
        # Fallback: essayer de concat√©ner par paires
        if len(materialized_clips) > 2:
            st.warning("üîÑ Tentative de concat√©nation par paires...")
            
            try:
                # Concat√©ner deux par deux
                while len(materialized_clips) > 1:
                    new_clips = []
                    
                    for i in range(0, len(materialized_clips), 2):
                        if i + 1 < len(materialized_clips):
                            # Concat√©ner une paire
                            pair = [materialized_clips[i], materialized_clips[i+1]]
                            st.info(f"üîó Concat√©nation paire {i//2 + 1}")
                            
                            pair_concat = concatenate_videoclips(pair, method=method)
                            if pair_concat:
                                # Mat√©rialiser imm√©diatement
                                pair_materialized = materialize_clip(pair_concat, f"pair_{i//2 + 1}")
                                if pair_materialized:
                                    new_clips.append(pair_materialized)
                                pair_concat.close()
                            
                            # Fermer les clips de la paire
                            pair[0].close()
                            pair[1].close()
                        else:
                            # Clip impair restant
                            new_clips.append(materialized_clips[i])
                    
                    materialized_clips = new_clips
                    
                    if len(materialized_clips) == 1:
                        st.success("‚úÖ Concat√©nation par paires r√©ussie")
                        return materialized_clips[0]
                
            except Exception as e2:
                st.error(f"‚ùå √âchec concat√©nation par paires: {str(e2)}")
        
        # Dernier recours: retourner le premier clip
        if materialized_clips:
            st.warning("‚ö†Ô∏è Retour du premier clip seulement")
            for clip in materialized_clips[1:]:
                clip.close()
            return materialized_clips[0]
        
        return None


def create_final_video_ultra_safe(
    clips: List[VideoFileClip],
    output_path: str,
    shuffle: bool = True,
    smart_shuffle: bool = True,
    clips_by_video: Optional[Dict[int, List[VideoFileClip]]] = None,
    logo_config: Optional[Dict] = None,
    audio_config: Optional[Dict] = None,
    tagline_path: Optional[str] = None,
    output_duration: Optional[float] = None
) -> bool:
    """
    Version ultra-s√©curis√©e avec mat√©rialisation syst√©matique
    """
    import gc
    
    try:
        st.header("üé¨ Assemblage ultra-s√©curis√© de la vid√©o")
        
        if not clips:
            st.error("‚ùå Aucun clip fourni")
            return False
        
        st.info(f"üìä {len(clips)} clips √† assembler")
        
        # M√©langer si demand√©
        if smart_shuffle and clips_by_video and len(clips_by_video) > 1:
            # Utiliser la fonction smart_shuffle_clips d√©finie localement
            clips = smart_shuffle_clips(clips_by_video)
            st.info("üîÄ M√©lange intelligent appliqu√©")
        elif shuffle:
            random.shuffle(clips)
            st.info("üîÄ Clips m√©lang√©s al√©atoirement")
        
        # Pr√©paration et normalisation
        st.info("üîß Pr√©paration des clips...")
        prepared_clips = prepare_clips_for_concatenation(clips)
        
        if not prepared_clips:
            st.error("‚ùå √âchec de la pr√©paration des clips")
            return False
        
        # CONCAT√âNATION ULTRA-S√âCURIS√âE avec mat√©rialisation
        final_video = safe_concatenate_with_materialization(
            prepared_clips, 
            method="compose"
        )
        
        if final_video is None:
            st.error("‚ùå √âchec de l'assemblage des clips")
            return False
        
        # Test de validit√© finale
        try:
            test_frame = final_video.get_frame(0)
            if test_frame is None:
                st.error("‚ùå La vid√©o finale n'est pas fonctionnelle")
                final_video.close()
                return False
            
            st.success(f"‚úÖ Vid√©o assembl√©e et valid√©e (dur√©e: {final_video.duration:.1f}s)")
            
        except Exception as e:
            st.error(f"‚ùå Erreur validation vid√©o finale: {str(e)}")
            final_video.close()
            return False
        
        # Ajuster la dur√©e si n√©cessaire
        if output_duration and not (audio_config and audio_config.get('adapt_to_audio')):
            if final_video.duration > output_duration:
                st.info(f"‚úÇÔ∏è Ajustement dur√©e: {final_video.duration:.1f}s ‚Üí {output_duration}s")
                final_video = final_video.subclip(0, output_duration)
                # Mat√©rialiser apr√®s la coupe
                final_video = materialize_clip(final_video, "final_trimmed")
                if not final_video:
                    st.error("‚ùå √âchec mat√©rialisation apr√®s d√©coupe")
                    return False
        
        # Ajouter le logo si configur√©
        if logo_config and logo_config.get('logo_path'):
            st.info("üñºÔ∏è Ajout du logo...")
            try:
                from video_extractor import add_logo_overlay
                final_video = add_logo_overlay(final_video, **logo_config)
                # Mat√©rialiser apr√®s ajout du logo
                final_video = materialize_clip(final_video, "final_with_logo")
                if not final_video:
                    st.warning("‚ö†Ô∏è Logo non ajout√© (√©chec mat√©rialisation)")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur ajout logo: {str(e)}")
        
        # Ajouter l'audio si configur√©
        if audio_config and audio_config.get('audio_path'):
            st.info("üéµ Ajout de l'audio...")
            try:
                from video_extractor import add_audio_to_video
                final_video = add_audio_to_video(final_video, **audio_config)
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur ajout audio: {str(e)}")
                final_video = final_video.without_audio()
        else:
            final_video = final_video.without_audio()
        
        # Ajouter la tagline si configur√©e
        if tagline_path and os.path.exists(tagline_path):
            st.info("üè∑Ô∏è Ajout de la tagline...")
            try:
                from video_extractor import add_tagline
                final_video = add_tagline(final_video, tagline_path)
                # Mat√©rialiser apr√®s ajout tagline
                final_video = materialize_clip(final_video, "final_with_tagline")
                if not final_video:
                    st.warning("‚ö†Ô∏è Tagline non ajout√©e (√©chec mat√©rialisation)")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur ajout tagline: {str(e)}")
        
        # Test final avant encodage
        try:
            test_frame = final_video.get_frame(0)
            if test_frame is None:
                st.error("‚ùå Vid√©o finale non fonctionnelle avant encodage")
                final_video.close()
                return False
            st.success("‚úÖ Vid√©o finale valid√©e pour encodage")
        except Exception as e:
            st.error(f"‚ùå Erreur test final: {str(e)}")
            final_video.close()
            return False
        
        # Encodage final
        st.info("üíæ Encodage de la vid√©o finale...")
        
        encoding_params = {
            'codec': 'libx264',
            'fps': VIDEO_FORMAT['fps'],
            'preset': 'ultrafast' if IS_RAILWAY else 'fast',
            'threads': 2 if IS_RAILWAY else 4,
            'logger': None,
            'verbose': False,
            'write_logfile': False,
            'bitrate': '4000k' if IS_RAILWAY else '6000k',
        }
        
        if final_video.audio is not None:
            encoding_params['audio_codec'] = 'aac'
            encoding_params['audio_bitrate'] = '128k'
        else:
            encoding_params['audio'] = False
        
        # Progress bar
        progress_bar = st.progress(0)
        progress_text = st.empty()
        
        try:
            # √âcrire la vid√©o finale
            final_video.write_videofile(
                output_path,
                **encoding_params,
                temp_audiofile=output_path.replace('.mp4', '_temp_audio.m4a')
            )
            
            progress_bar.progress(100)
            progress_text.text("‚úÖ Encodage termin√©!")
            
            # V√©rifier le fichier final
            if os.path.exists(output_path):
                file_size_mb = os.path.getsize(output_path) / 1024 / 1024
                if file_size_mb > 0.1:
                    st.success(f"‚úÖ Vid√©o cr√©√©e avec succ√®s: {file_size_mb:.1f} MB")
                else:
                    st.error(f"‚ùå Fichier trop petit: {file_size_mb:.2f} MB")
                    return False
            else:
                st.error("‚ùå Fichier de sortie non cr√©√©")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Erreur encodage final: {str(e)}")
            return False
        
        finally:
            # Nettoyage complet
            if final_video:
                final_video.close()
                # Supprimer le fichier temporaire si c'est un fichier mat√©rialis√©
                if hasattr(final_video, 'filename') and 'materialized_' in final_video.filename:
                    try:
                        os.remove(final_video.filename)
                    except:
                        pass
            
            # Nettoyer tous les clips
            for clip in clips:
                if hasattr(clip, 'close'):
                    try:
                        clip.close()
                    except:
                        pass
            
            # Forcer la lib√©ration m√©moire
            gc.collect()
            st.info("üßπ M√©moire lib√©r√©e")
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå Erreur fatale: {str(e)}")
        
        # Nettoyage en cas d'erreur
        for clip in clips:
            if hasattr(clip, 'close'):
                try:
                    clip.close()
                except:
                    pass
        
        gc.collect()
        return False
