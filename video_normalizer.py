"""
Module de normalisation des clips vid√©o
Assure que tous les clips ont exactement les m√™mes propri√©t√©s avant concat√©nation
"""
import streamlit as st
import numpy as np
from moviepy.editor import VideoFileClip
from typing import List, Tuple
from constants import VIDEO_FORMAT


def normalize_clip_size(clip: VideoFileClip, target_size: Tuple[int, int] = None) -> VideoFileClip:
    """
    Normalise un clip √† la taille cible en pr√©servant le contenu au maximum
    
    Args:
        clip: Le clip √† normaliser
        target_size: Taille cible (largeur, hauteur). Par d√©faut utilise VIDEO_FORMAT
    
    Returns:
        VideoFileClip normalis√©
    """
    if target_size is None:
        target_size = (VIDEO_FORMAT['width'], VIDEO_FORMAT['height'])
    
    target_width, target_height = target_size
    target_ratio = target_width / target_height
    
    # Si d√©j√† √† la bonne taille, retourner tel quel
    if clip.size == target_size:
        return clip
    
    current_width, current_height = clip.size
    current_ratio = current_width / current_height
    
    st.info(f"üìê Normalisation: {clip.size} ‚Üí {target_size}")
    
    # Strat√©gie 1: Si les ratios sont proches, simple resize
    if abs(current_ratio - target_ratio) < 0.1:
        return clip.resize(target_size)
    
    # Strat√©gie 2: Crop + Resize pour pr√©server le maximum de contenu
    if current_ratio > target_ratio:
        # Video trop large - on crop horizontalement
        new_width = int(current_height * target_ratio)
        x_start = (current_width - new_width) // 2
        clip = clip.crop(x1=x_start, x2=x_start + new_width, y1=0, y2=current_height)
    else:
        # Video trop haute - on crop verticalement
        new_height = int(current_width / target_ratio)
        y_start = (current_height - new_height) // 2
        clip = clip.crop(x1=0, x2=current_width, y1=y_start, y2=y_start + new_height)
    
    # Resize final √† la taille exacte
    return clip.resize(target_size)


def normalize_clips_batch(clips: List[VideoFileClip]) -> List[VideoFileClip]:
    """
    Normalise une liste de clips pour qu'ils aient tous les m√™mes propri√©t√©s
    
    Args:
        clips: Liste des clips √† normaliser
    
    Returns:
        Liste des clips normalis√©s
    """
    if not clips:
        return []
    
    target_size = (VIDEO_FORMAT['width'], VIDEO_FORMAT['height'])
    target_fps = VIDEO_FORMAT['fps']
    
    normalized_clips = []
    
    st.info(f"üîß Normalisation de {len(clips)} clips...")
    st.info(f"   Cible: {target_size[0]}x{target_size[1]} @ {target_fps} FPS")
    
    for i, clip in enumerate(clips):
        try:
            # Ignorer les clips None ou invalides
            if clip is None:
                st.warning(f"‚ö†Ô∏è Clip {i+1} est None, ignor√©")
                continue
            
            if not hasattr(clip, 'size') or not hasattr(clip, 'fps'):
                st.warning(f"‚ö†Ô∏è Clip {i+1} invalide, ignor√©")
                continue
            
            # Info sur le clip original
            st.info(f"üìπ Clip {i+1}: {clip.size} @ {clip.fps} FPS")
            
            # Normaliser la taille
            normalized = normalize_clip_size(clip, target_size)
            
            # Normaliser le FPS si diff√©rent
            if hasattr(clip, 'fps') and clip.fps != target_fps:
                st.info(f"   üé¨ Ajustement FPS: {clip.fps} ‚Üí {target_fps}")
                normalized = normalized.set_fps(target_fps)
            
            # Retirer l'audio pour √©viter les probl√®mes
            if hasattr(normalized, 'audio') and normalized.audio is not None:
                normalized = normalized.without_audio()
                st.info(f"   üîá Audio retir√©")
            
            # V√©rification finale
            if normalized.size != target_size:
                st.error(f"‚ùå √âchec normalisation clip {i+1}: taille {normalized.size}")
                continue
            
            # Test d'acc√®s aux frames
            try:
                test_frame = normalized.get_frame(0)
                if test_frame is None:
                    st.error(f"‚ùå Clip {i+1} normalis√© retourne None")
                    continue
                
                normalized_clips.append(normalized)
                st.success(f"‚úÖ Clip {i+1} normalis√© avec succ√®s")
                
            except Exception as e:
                st.error(f"‚ùå Clip {i+1} non fonctionnel apr√®s normalisation: {str(e)}")
                continue
                
        except Exception as e:
            st.error(f"‚ùå Erreur normalisation clip {i+1}: {str(e)}")
            continue
    
    st.info(f"‚úÖ {len(normalized_clips)}/{len(clips)} clips normalis√©s avec succ√®s")
    
    return normalized_clips


def verify_clips_compatibility(clips: List[VideoFileClip]) -> bool:
    """
    V√©rifie que tous les clips sont compatibles pour la concat√©nation
    
    Args:
        clips: Liste des clips √† v√©rifier
    
    Returns:
        True si tous les clips sont compatibles
    """
    if not clips:
        st.error("‚ùå Aucun clip √† v√©rifier")
        return False
    
    # R√©cup√©rer les propri√©t√©s du premier clip comme r√©f√©rence
    first_clip = clips[0]
    ref_size = first_clip.size
    ref_fps = getattr(first_clip, 'fps', 30)
    
    st.info(f"üîç V√©rification de compatibilit√© ({len(clips)} clips)")
    st.info(f"   R√©f√©rence: {ref_size} @ {ref_fps} FPS")
    
    all_compatible = True
    
    for i, clip in enumerate(clips):
        issues = []
        
        # V√©rifier la taille
        if clip.size != ref_size:
            issues.append(f"Taille: {clip.size} ‚â† {ref_size}")
            all_compatible = False
        
        # V√©rifier le FPS
        clip_fps = getattr(clip, 'fps', 30)
        if abs(clip_fps - ref_fps) > 1:  # Tol√©rance de 1 FPS
            issues.append(f"FPS: {clip_fps} ‚â† {ref_fps}")
            all_compatible = False
        
        # V√©rifier l'acc√®s aux frames
        try:
            frame = clip.get_frame(0)
            if frame is None:
                issues.append("get_frame retourne None")
                all_compatible = False
        except Exception as e:
            issues.append(f"Erreur get_frame: {str(e)}")
            all_compatible = False
        
        # Afficher le r√©sultat
        if issues:
            st.warning(f"‚ö†Ô∏è Clip {i+1} incompatible: {', '.join(issues)}")
        else:
            st.success(f"‚úÖ Clip {i+1} compatible")
    
    if all_compatible:
        st.success("‚úÖ Tous les clips sont compatibles pour la concat√©nation")
    else:
        st.warning("‚ö†Ô∏è Des clips n√©cessitent une normalisation")
    
    return all_compatible


def prepare_clips_for_concatenation(clips: List[VideoFileClip]) -> List[VideoFileClip]:
    """
    Pr√©pare et normalise les clips pour une concat√©nation sans erreur
    
    Args:
        clips: Liste des clips √† pr√©parer
    
    Returns:
        Liste des clips pr√™ts pour la concat√©nation
    """
    st.header("üé¨ Pr√©paration des clips pour concat√©nation")
    
    # √âtape 1: V√©rifier la compatibilit√©
    if verify_clips_compatibility(clips):
        st.info("‚úÖ Clips d√©j√† compatibles, pas de normalisation n√©cessaire")
        return clips
    
    # √âtape 2: Normaliser tous les clips
    st.info("üîß Normalisation n√©cessaire...")
    normalized = normalize_clips_batch(clips)
    
    # √âtape 3: V√©rifier √† nouveau
    if verify_clips_compatibility(normalized):
        st.success("‚úÖ Clips normalis√©s et pr√™ts pour la concat√©nation")
        return normalized
    else:
        st.error("‚ùå √âchec de la normalisation")
        return []
